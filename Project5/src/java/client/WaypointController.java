import javax.swing.*;
import java.awt.event.*;
import java.net.URL;
import java.text.NumberFormat;

/**
 * Copyright (c) 2018 Tim Lindquist,
 * Software Engineering,
 * Arizona State University at the Polytechnic campus
 * <p/>
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation version 2
 * of the License.
 * <p/>
 * This program is distributed in the hope that it will be useful,
 * but without any warranty or fitness for a particular purpose.
 * <p/>
 * Please review the GNU General Public License at:
 * http://www.gnu.org/licenses/gpl-2.0.html
 * see also: https://www.gnu.org/licenses/gpl-faq.html
 * so you are aware of the terms and your rights with regard to this software.
 * Or, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,USA
 * <p/>
 * Purpose: Java client UI for Waypoint management.
 * This class creates Gui components for a UI to manage waypoints.
 * This software is meant to run on OSX, and Windows Cygwin using g++.
 * WaypointController demonstrates use of the WaypointGUI class
 * for solving ser321 assignments.
 * WaypointGUI class uses Swing components JTextField, JComboBox, and
 * JTextArea to realize a GUI for Waypoint management.
 * <p/>
 * Ser321 Principles of Distributed Software Systems.
 * see http://pooh.poly.asu.edu/Ser321
 *
 * @author Tim Lindquist (Tim.Lindquist@asu.edu) CIDSE - Software Engineering
 * Ira Fulton Schools of Engineering, ASU Polytechnic
 * @file WaypointGUI.java
 * @date January, 2018
 * @license See above
 */
public class WaypointController extends WaypointGUI implements ActionListener, ItemListener {

    private static final boolean debugOn = true;
    private WaypointCollectionHttpProxy remomteCollection = null;
    private Waypoint selectedWaypoint = null;
    private Waypoint fromWaypoint = null;
    private Waypoint toWaypoint = null;


    public WaypointController(String base, WaypointCollectionHttpProxy collection) {
        super(base);
        remomteCollection = collection;
        removeWPButt.addActionListener(this);
        addWPButt.addActionListener(this);
        modWPButt.addActionListener(this);
        importButt.addActionListener(this);
        exportButt.addActionListener(this);
        distBearButt.addActionListener(this);
        frWps.addItemListener(this);
        toWps.addItemListener(this);

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                debug("you clicked X");
                System.exit(0);
            }
        });

        setVisible(true);
        this.refresh();
    }

    public void itemStateChanged(ItemEvent event) {
        if (event.getStateChange() == ItemEvent.SELECTED) {
            this.clearMessage();

            JComboBox input = (JComboBox) event.getSource();
            debug("Selection event generated by " +
                    ((input == this.frWps) ? "from " : "to ") + "combobox. " +
                    "Selected waypoint is: " + (event.getItem() instanceof Waypoint ? ((Waypoint) event.getItem()).name : event.getItem()));

            this.selectedWaypoint = this.getSelected(input);

            if (input == this.frWps) {
                this.fromWaypoint = this.selectedWaypoint;
            } else if (input == this.toWps) {
                this.toWaypoint = this.selectedWaypoint;
            }

            if (this.selectedWaypoint != null) {
                this.showWaypoint(this.selectedWaypoint);
            } else {
                this.clearInputs();
            }
        }
    }

    public void actionPerformed(ActionEvent e) {
        Object frwp, towp;
        Waypoint wp;
        Boolean exist;
        this.clearMessage();

        switch (e.getActionCommand()) {
            case "Remove":
                debug("you clicked Remove Waypoint");

                if (this.selectedWaypoint == null) {
                    this.showMessage("Error: No waypoint Selected");
                    return;
                }

                this.remomteCollection.remove(this.selectedWaypoint.name);

                if (this.fromWaypoint.equals(this.selectedWaypoint)) {
                    this.fromWaypoint = null;
                } else if (this.toWaypoint.equals(this.selectedWaypoint)) {
                    this.toWaypoint = null;
                }

                this.showMessage("Removed: " + this.selectedWaypoint.name);

                this.refresh();
                break;
            case "Add":
                debug("you clicked Add Waypoint");

                wp = new Waypoint(
                        this.latIn.getText(),
                        this.lonIn.getText(),
                        this.eleIn.getText(),
                        this.nameIn.getText(),
                        this.addrIn.getText()
                );

                if (wp.name.isEmpty()) {
                    this.showMessage("Error: No name given");
                    return;
                }

                this.remomteCollection.remove(wp.name);

                this.remomteCollection.add(wp);

                if (this.toWaypoint != null && this.selectedWaypoint != null && this.toWaypoint.equals(this.selectedWaypoint)) {
                    this.toWaypoint = wp;
                } else {
                    this.fromWaypoint = wp;
                }
                this.selectedWaypoint = wp;

                this.showMessage("Added: " + wp.name);

                this.refresh();
                break;
            case "Modify":

                if (this.selectedWaypoint == null) {
                    this.showMessage("Error: No waypoint selected");
                    return;
                }

                wp = new Waypoint(
                        this.latIn.getText(),
                        this.lonIn.getText(),
                        this.eleIn.getText(),
                        this.nameIn.getText(),
                        this.addrIn.getText()
                );

                if (wp.name.isEmpty()) {
                    this.showMessage("Error: No name given");
                    return;
                }

                this.remomteCollection.remove(this.selectedWaypoint.name);
                this.remomteCollection.add(wp);

                if (this.fromWaypoint.equals(this.selectedWaypoint)) {
                    this.fromWaypoint = wp;
                } else if (this.toWaypoint.equals(this.selectedWaypoint)) {
                    this.toWaypoint = wp;
                }
                this.selectedWaypoint = wp;

                this.showMessage("Updated: " + wp.name);
                this.refresh();
                break;
            case "Import":
                debug("you clicked Import Json Library");
                this.remomteCollection.resetFromJsonFile();
                this.refresh();
                break;
            case "Export":
                debug("you clicked Export Json Library");
                this.remomteCollection.saveToJsonFile();
                break;
            case "Distance":
                debug("you clicked Distance and Bearing");

                NumberFormat nf = NumberFormat.getInstance();
                nf.setMaximumFractionDigits(2);

                frwp = this.fromWaypoint;
                towp = this.toWaypoint;

                if (frwp != null || towp != null) {
                    if (!(frwp != null && towp != null)) {
                        frwp = towp = (frwp != null ? frwp : towp);
                    }

                    Waypoint thefrWp = (Waypoint) frwp;
                    Waypoint thetoWp = (Waypoint) towp;

                    this.showMessage(nf.format(thefrWp.distanceGCTo(thetoWp, Waypoint.KMETER))
                            + " km at " +
                            nf.format(thefrWp.bearingGCInitTo(thetoWp, Waypoint.KMETER))
                            + " degrees ");
                } else {
                    this.showMessage("Error: No waypoint Selected");
                    return;
                }

                break;
        }
    }

    private void refresh() {
        Waypoint selectedWaypoint = this.selectedWaypoint;
        Waypoint toWaypoint = this.toWaypoint;
        Waypoint fromWaypoint = this.fromWaypoint;

        while (this.frWps.getItemCount() > 1) {
            this.frWps.removeItemAt(1);
        }

        while (this.toWps.getItemCount() > 1) {
            this.toWps.removeItemAt(1);
        }

        this.clearInputs();
        this.clearMessage();

        for (String name : this.remomteCollection.getNames()) {
            this.frWps.addItem(name);
            this.toWps.addItem(name);
        }

        if (toWaypoint != null) {
            this.toWps.setSelectedItem(toWaypoint.name);
            this.toWaypoint = toWaypoint;
        }

        if (fromWaypoint != null) {
            this.frWps.setSelectedItem(fromWaypoint.name);
            this.fromWaypoint = fromWaypoint;
        }

        if (selectedWaypoint != null) {
            this.showWaypoint(selectedWaypoint);
            this.selectedWaypoint = selectedWaypoint;
        } else {
            this.clearInputs();
            this.selectedWaypoint = null;
        }
    }


    private void clearMessage() {
        this.distBearIn.setText("");
    }

    private Waypoint getSelected(JComboBox input) {
        if (input.getSelectedIndex() == 0) {
            return null;
        }
        return this.remomteCollection.get(input.getSelectedItem().toString());
    }

    private void showMessage(String message) {
        this.distBearIn.setText(message);
    }


    private void showWaypoint(Waypoint wp) {
        this.latIn.setText(String.valueOf(wp.lat));
        this.lonIn.setText(String.valueOf(wp.lon));
        this.eleIn.setText(String.valueOf(wp.ele));
        this.nameIn.setText(wp.name);
        this.addrIn.setText(wp.address);
    }

    private void clearInputs() {
        this.latIn.setText("");
        this.lonIn.setText("");
        this.eleIn.setText("");
        this.nameIn.setText("");
        this.addrIn.setText("");
    }

    private void debug(String message) {
        if (debugOn)
            System.out.println("debug: " + message);
    }


    public static void main(String args[]) {

        String host = "localhost";
        String port = "8080";

        if (args.length >= 2) {
            host = args[0];
            port = args[1];
        }


        try {
            String name = "Michael Kasper";

            if (args.length >= 2) {
                host = args[0];
                port = args[1];
            }

            if (args.length >= 3) {
                name = args[2];
            }

            String url = "http://" + host + ":" + port + "/";
            System.out.println("Opening connection to: " + url);
            WaypointCollectionHttpProxy sc = new WaypointCollectionHttpProxy(new URL(url));


            WaypointController sa2 = new WaypointController(name, sc);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}
