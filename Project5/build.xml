<?xml version="1.0"?>
<project name="JsonRPC in CPP using libjson-rpc-cpp" default="targets">
    <taskdef resource="cpptasks.tasks"/>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    <property name="src.dir" value="src"/>
    <property name="dist.dir" value="bin"/>
    <property name="classes.dir" value="classes"/>
    <property name="obj.dir" value="obj"/>
    <property name="host.name" value="127.0.0.1"/>
    <property name="port.num" value="8080"/>
    <property name="json.file.name" value="WaypointLibraryMethods.json"/>
    <property environment="env"/>
    <!--Set the ostype property: <property name="ostype" value="${env.OSTYPE}"/>-->
    <condition property="ostype" value="${env.OSTYPE}">
        <isset property="env.OSTYPE"/>
    </condition>
    <condition property="ostype" value="env.OSTYPE_inaccessable">
        <not>
            <isset property="env.OSTYPE"/>
        </not>
    </condition>

    <!--Set the dyldpath property <var name="dyldpath" value="${env.DYLD_FALLBACK_LIBRARY_PATH}"/>-->
    <condition property="dyldpath" value="${env.DYLD_FALLBACK_PATH}">
        <isset property="env.DYLD_FALLBACK_PATH"/>
    </condition>
    <condition property="dyldpath" value="env.DYLD_FALLBACK_PATH_inaccessible">
        <not>
            <isset property="env.DYLD_FALLBACK_PATH"/>
        </not>
    </condition>

    <target name="targets">
        <echo message="Targets are clean, prepare, generate.server.stub, generate.client.stub, build.cpp.server, build.cpp.client, build.java.client, execute.server, execute.java.client and execute.cpp.client, targets"/>
        <echo message="base directory is: ${basedir} and ostype is ${ostype}"/>
        <echo message="execute cpp server with: ./bin/waypointRPCServer ${port.num}"/>
        <echo message="execute cpp client with: ./bin/waypointRPCClient http://${host.name}:${port.num}"/>
        <echo message="invoke java http client with: java -cp classes:lib/json.jar WaypointController ${host.name} ${port.num}"/>
    </target>

    <path id="compile.classpath">
        <pathelement location="${classes.dir}"/>
        <fileset dir="${basedir}/lib">
            <include name="json.jar"/>
        </fileset>
    </path>

    <target name="clean">
        <delete dir="${classes.dir}" failonerror="false"/>
        <delete dir="${dist.dir}" failonerror="false"/>
        <delete dir="${obj.dir}" failonerror="false"/>
        <delete dir="log" failonerror="false"/>
        <delete file="log.txt" failonerror="false"/>
        <delete file="logerrors.txt" failonerror="false"/>
        <delete file="logpid.txt" failonerror="false"/>
        <delete file="${src.dir}/cpp/server/waypointserverstub.h"
                failonerror="false"/>
        <delete file="${src.dir}/cpp/client/waypointcollectionstub.h"
                failonerror="false"/>
    </target>

    <target name="prepare">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="log"/>
        <mkdir dir="${obj.dir}/client"/>
        <mkdir dir="${obj.dir}/server"/>
        <if>
            <isset property="env.USERNAME"/>
            <then>
                <echo message="detected username is: ${env.USERNAME}"/>
            </then>
            <elseif>
                <isset property="env.USER"/>
                <then>
                    <echo message="detected user is: ${env.USER}"/>
                </then>
            </elseif>
        </if>
        <echo message="host name is: ${os.name}"/>
        <echo message="host arch is: ${os.arch}"/>
        <echo message="host version is: ${os.version}"/>

        <property name="cxxflag" value="-std=c++14"/>
        <property name="includepath" value="/usr/local/include:/usr/include/jsoncpp"/>
        <property name="client.lib.path" value="/usr/local/lib"/>
        <property name="client.lib.list" value="jsoncpp,jsonrpccpp-client,jsonrpccpp-common,microhttpd,stdc++,fltk,m"/>
        <property name="server.lib.path" value="/usr/local/lib"/>
        <property name="server.lib.list" value="jsoncpp,jsonrpccpp-server,jsonrpccpp-common,microhttpd,stdc++,m"/>
    </target>

    <target name="generate.client.stub" depends="prepare">
        <exec dir="${basedir}" executable="jsonrpcstub">
            <arg line="${json.file.name} --cpp-client=waypointcollectionstub"/>
        </exec>
        <copy file="waypointcollectionstub.h"
              tofile="${src.dir}/cpp/client/waypointcollectionstub.h"/>
        <delete file="waypointcollectionstub.h"/>
    </target>

    <target name="generate.server.stub" depends="prepare">
        <exec dir="${basedir}" executable="jsonrpcstub">
            <arg line="${json.file.name} --cpp-server=waypointserverstub"/>
        </exec>
        <copy file="waypointserverstub.h"
              tofile="${src.dir}/cpp/server/waypointserverstub.h"/>
        <delete file="waypointserverstub.h"/>
    </target>

    <target name="build.cpp.server" depends="generate.server.stub">
        <cc outtype="executable" subsystem="console"
            outfile="${dist.dir}/waypointRPCServer"
            objdir="${obj.dir}/server">
            <compiler name="g++"/>
            <compilerarg value="${cxxflag}"/>
            <includepath>
                <pathelement path="${includepath}"/>
            </includepath>
            <libset dir="${server.lib.path}" libs="${server.lib.list}"/>
            <fileset dir="${src.dir}/cpp/server" includes="Waypoint.cpp, WaypointCollection.cpp, WaypointServer.cpp"/>
        </cc>
    </target>

    <target name="build.cpp.client" depends="generate.client.stub">
        <cc outtype="executable" subsystem="console"
            outfile="${dist.dir}/waypointRPCClient"
            objdir="${obj.dir}/client">
            <compilerarg value="${cxxflag}"/>
            <includepath>
                <pathelement path="${includepath}"/>
            </includepath>
            <libset dir="${client.lib.path}" libs="${client.lib.list}"/>
            <fileset dir="${src.dir}/cpp/client" includes="WaypointGUI.cpp"/>
            <fileset dir="${src.dir}/cpp/client" includes="WaypointApp.cpp"/>
            <fileset dir="${src.dir}/cpp/server" includes="Waypoint.cpp"/>
        </cc>
    </target>

    <target name="build.java.client" depends="prepare"
            description="Compile Java client sources">
        <!-- Compile Java classes as necessary -->
        <echo message="execute: java -cp classes:lib/json.jar WaypointController localhost 8080"/>
        <javac srcdir="${src.dir}/java/client"
               destdir="${classes.dir}"
               includeantruntime="false">
            <classpath refid="compile.classpath"/>
        </javac>
    </target>

    <target name="execute.server" depends="build.cpp.server" description="Run the program">
        <exec executable="${dist.dir}/waypointRPCServer">
            <arg line="${port.num}"/>
        </exec>
    </target>

    <target name="execute.java.client" depends="build.java.client"
            description="Run the program">
        <echo message="command line execute: java -cp classes WaypointController"/>
        <java classname="WaypointController" fork="yes">
            <classpath refid="compile.classpath"/>
            <arg value="${host.name}"/>
            <arg value="${port.num}"/>
        </java>
    </target>


    <target name="execute.cpp.client" depends="build.cpp.client" description="Run the program">
        <exec executable="${dist.dir}/waypointRPCClient">
            <arg line="http://${host.name}:${port.num}"/>
        </exec>
    </target>


</project>
