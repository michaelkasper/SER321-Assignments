package waypoint;

import java.io.*;
import java.awt.event.*;
import java.text.NumberFormat;
import java.util.*;

import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;

import javax.swing.*;

/**
 * Copyright (c) 2018 Tim Lindquist,
 * Software Engineering,
 * Arizona State University at the Polytechnic campus
 * <p/>
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation version 2
 * of the License.
 * <p/>
 * This program is distributed in the hope that it will be useful,
 * but without any warranty or fitness for a particular purpose.
 * <p/>
 * Please review the GNU General Public License at:
 * http://www.gnu.org/licenses/gpl-2.0.html
 * see also: https://www.gnu.org/licenses/gpl-faq.html
 * so you are aware of the terms and your rights with regard to this software.
 * Or, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,USA
 * <p/>
 * Purpose: Java client UI for Waypoint management.
 * This class creates Gui components for a UI to manage waypoints.
 * This software is meant to run on OSX, and Windows Cygwin using g++.
 * WaypointController demonstrates use of the WaypointGUI class
 * for solving ser321 assignments.
 * WaypointGUI class uses Swing components JTextField, JComboBox, and
 * JTextArea to realize a GUI for Waypoint management.
 * <p/>
 * Ser321 Principles of Distributed Software Systems.
 * see http://pooh.poly.asu.edu/Ser321
 *
 * @author Tim Lindquist (Tim.Lindquist@asu.edu) CIDSE - Software Engineering
 * Ira Fulton Schools of Engineering, ASU Polytechnic
 * @file WaypointGUI.java
 * @date January, 2018
 * @license See above
 */
public class WaypointController extends WaypointGUI implements ActionListener, ItemListener {

    private static final boolean debugOn = true;
    Map<String, Waypoint> waypoints = new HashMap<String, Waypoint>();
    private Waypoint current = new Waypoint();
    private String fileName = "waypoint.json";


    public WaypointController(String base) {
        super(base);
        removeWPButt.addActionListener(this);
        addWPButt.addActionListener(this);
        modWPButt.addActionListener(this);
        importButt.addActionListener(this);
        exportButt.addActionListener(this);
        distBearButt.addActionListener(this);
        frWps.addItemListener(this);
        toWps.addItemListener(this);

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                debug("you clicked X");
                System.exit(0);
            }
        });

        setVisible(true);
        this.cleanScreen();
        this.showWaypoint(this.current);
    }

    public void itemStateChanged(ItemEvent event) {
        if (event.getStateChange() == ItemEvent.SELECTED) {
            this.cleanScreen();

            JComboBox input = (JComboBox) event.getSource();
            debug("Selection event generated by " +
                    ((input == frWps) ? "from " : "to ") + "combobox. " +
                    "Selected waypoint is: " + (event.getItem() instanceof Waypoint ? ((Waypoint) event.getItem()).name : event.getItem()));

            Waypoint wp = this.getSelected(input);
            this.current = wp != null ? wp : new Waypoint();

            this.showWaypoint(this.current);
            this.showMessage("Viewing: " + this.current.name);
        }
    }

    public void actionPerformed(ActionEvent e) {
        Object frwp, towp;
        Waypoint wp;
        Boolean exist;
        this.cleanScreen();

        switch (e.getActionCommand()) {
            case "Remove":
                debug("you clicked Remove Waypoint");

                wp = this.getSelected(this.frWps);

                if (wp == null) {
                    this.showMessage("Error: No waypoint Selected");
                    return;
                }

                this.doRemove(wp);
                this.selectDefaultWaypoint(this.frWps);
                this.selectDefaultWaypoint(this.toWps);
                this.cleanScreen();
                this.current = null;

                this.showMessage("Removed: " + wp.name);

                break;
            case "Add":
                debug("you clicked Add Waypoint");

                if (this.nameIn.getText().trim().isEmpty()) {
                    this.showMessage("Error: No name given");
                    return;
                }

                exist = this.waypoints.containsKey(this.nameIn.getText());

                wp = this.doAdd(
                        this.latIn.getText(),
                        this.lonIn.getText(),
                        this.eleIn.getText(),
                        this.nameIn.getText(),
                        this.addrIn.getText()
                );

                this.current = wp;
                this.showMessage((!exist ? "Added: " : "Replaced: ") + wp.name);
                break;
            case "Modify":

                wp = this.current;
                if (wp == null) {
                    this.showMessage("Error: No waypoint Selected");
                    return;
                }

                this.current = this.doAdd(
                        this.latIn.getText(),
                        this.lonIn.getText(),
                        this.eleIn.getText(),
                        this.nameIn.getText(),
                        this.addrIn.getText()
                );

                if (!this.current.name.equals(wp.name)) {
                    if (this.toWps.getSelectedItem().equals(wp.name)) {
                        this.selectWaypoint(this.toWps, this.current);
                    }

                    if (this.frWps.getSelectedItem().equals(wp.name)) {
                        this.selectWaypoint(this.frWps, this.current);
                    }

                    this.doRemove(wp);
                }


                this.showMessage("Modified: " + this.current.name);
                break;
            case "Import":
                debug("you clicked Import Json Library");
                if (this.doImport()) {
                    this.showMessage("Imported from " + this.fileName);
                } else {
                    this.showMessage("Error Importing");
                }
                break;
            case "Export":
                debug("you clicked Export Json Library");
                if (this.doExport()) {
                    this.showMessage("Exported to " + this.fileName);
                } else {
                    this.showMessage("Error Exporting");
                }
                break;
            case "Distance":
                debug("you clicked Distance and Bearing");

                NumberFormat nf = NumberFormat.getInstance();
                nf.setMaximumFractionDigits(2);

                frwp = this.getSelected(this.frWps);
                towp = this.getSelected(this.toWps);

                if (frwp != null || towp != null) {
                    if (!(frwp != null && towp != null)) {
                        frwp = towp = (frwp != null ? frwp : towp);
                    }

                    Waypoint thefrWp = (Waypoint) frwp;
                    Waypoint thetoWp = (Waypoint) towp;

//                    debug("from:" + thefrWp.name + "(" + thefrWp.lat + ", " + thefrWp.lon + ", " + thefrWp.ele + ")");
//                    debug("to:" + thetoWp.name + "(" + thetoWp.lat + ", " + thetoWp.lon + ", " + thetoWp.ele + ")");

                    this.showMessage(nf.format(thefrWp.distanceGCTo(thetoWp, Waypoint.KMETER))
                            + " km at " +
                            nf.format(thefrWp.bearingGCInitTo(thetoWp, Waypoint.KMETER))
                            + " degrees ");
                } else {
                    this.showMessage("Error: No waypoint Selected");
                    return;
                }

                break;
        }
    }


    private Waypoint doAdd(String latIn, String lonIn, String eleIn, String nameIn, String address) {
        return this.doAdd(Double.parseDouble(latIn), Double.parseDouble(lonIn), Double.parseDouble(eleIn), nameIn, address);
    }

    private Waypoint doAdd(Double latIn, Double lonIn, Double eleIn, String nameIn, String address) {

        Waypoint wp = new Waypoint(
                latIn,
                lonIn,
                eleIn,
                nameIn.trim(),
                address.trim()
        );

        if (this.waypoints.containsKey(nameIn)) {
            this.waypoints.replace(wp.name, wp);
        } else {
            this.waypoints.put(wp.name, wp);
            this.frWps.addItem(wp.name);
            this.toWps.addItem(wp.name);
        }

        return wp;
    }

    private void doRemove(Waypoint waypoint) {
        if (waypoint != null) {
            this.frWps.removeItem(waypoint.name);
            this.toWps.removeItem(waypoint.name);
            this.waypoints.remove(waypoint.name);
        }
    }

    private Boolean doImport() {
        FileInputStream in = null;
        Map<String, Waypoint> oldMap = this.waypoints;
        while (this.frWps.getItemCount() > 1) {
            this.frWps.removeItemAt(1);
        }

        while (this.toWps.getItemCount() > 1) {
            this.toWps.removeItemAt(1);
        }
        try {

            this.waypoints = new HashMap<>();

            in = new FileInputStream(this.fileName);

            JSONObject jsonWrapper = (new JSONObject(new JSONTokener(in)));
            JSONArray keys = jsonWrapper.names();

            for (int j = 0; j < keys.length(); j++) {
                JSONObject jsonObject = jsonWrapper.getJSONObject(keys.getString(j));

                this.doAdd(
                        jsonObject.has("lat") ? jsonObject.getDouble("lat") : 0,
                        jsonObject.has("lon") ? jsonObject.getDouble("lon") : 0,
                        jsonObject.has("ele") ? jsonObject.getDouble("ele") : 0,
                        jsonObject.has("name") ? jsonObject.getString("name") : "",
                        jsonObject.has("address") ? jsonObject.getString("address") : ""
                );
            }
            in.close();

        } catch (Exception e) {
            e.printStackTrace();
            this.waypoints = oldMap;
            for (Waypoint wp : this.waypoints.values()) {
                this.frWps.addItem(wp.name);
                this.toWps.addItem(wp.name);
            }
            return false;
        }
        return true;
    }


    private Boolean doExport() {
        JSONObject jsonWrapper = new JSONObject();
        for (Waypoint wp : this.waypoints.values()) {
            jsonWrapper.put(wp.name, wp);
        }

        PrintWriter out = null;
        try {
            out = new PrintWriter(this.fileName);
            out.println(jsonWrapper.toString());
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return false;
        }

        return true;
    }


    private void cleanScreen() {
        this.distBearIn.setText("");
    }

    private Waypoint getSelected(JComboBox input) {
        if (input.getSelectedIndex() == 0) {
            return null;
        }
        return this.waypoints.get(input.getSelectedItem());
    }

    private void showMessage(String message) {
        this.distBearIn.setText(message);
    }

    private void selectDefaultWaypoint(JComboBox input) {
        input.setSelectedIndex(0);
    }

    private void selectWaypoint(JComboBox input, Waypoint wp) {
        input.setSelectedItem(wp.name);
        this.showWaypoint(wp);
    }

    private void showWaypoint(Waypoint wp) {
        this.latIn.setText(String.valueOf(wp.lat));
        this.lonIn.setText(String.valueOf(wp.lon));
        this.eleIn.setText(String.valueOf(wp.ele));
        this.nameIn.setText(wp.name);
        this.addrIn.setText(wp.address);
    }

    private void debug(String message) {
        if (debugOn)
            System.out.println("debug: " + message);
    }


    public static void main(String args[]) {
        try {
            String name = "Ser321";
            if (args.length >= 1) {
                name = args[0];
            }
            WaypointController sa2 = new WaypointController(name);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}
